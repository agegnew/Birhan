//#include <AltSoftSerial.h>

/*
  Walking aid for visual impaired and Emergency inform to family memebers
  ------------------------------------
  
  Description
  -----------
  1. Ultrasonic sensor is used to if there are obstacles ahide or dich or hole
  2. Buzzer is used to indicate to the visualiy impaired to ask for assistance from near by
  3. If any emergency happend they can press a button then it will inform relatives the location they are at
  
  Components Used
  ---------------
  -Ardiuno Nano
  -GSM Module
  -Button
  -Buzzer
  -Ultrasonic Sensor
  -Battry

###Ultrasonic Sensor####################################################
  Pin_name  Pin_number Description
  Vcc           1       Positive electrode of power supply, the voltage is 5V
  Trig          2       Triger pin
  Echo          3       Echo pin
  Gnd           4       Negative electrode of power supply
-----------------------------------------------------------
*/
#include <BareBoneSim800.h>
//BareBoneSim800 sim800;
BareBoneSim800 sim800("etc"); 

#define trigPin 10 /*define TrigPin*/
#define echoPin 11 /*define EchoPin.*/
#define MAX_DISTANCE 500 // Maximum sensor distance is rated at 400-500cm.

float timeOut = MAX_DISTANCE * 60;
int soundVelocity = 340; // define sound speed=340m/s

#define buttonPin 2     // the number of the push button pin
#define ledPin 13        // the number of the LED pin
#define buzzerPin 3

int AlarmDistance = 0;

//This function is used to reset the ardiuno
//if this function does not exist the ardiuno send data to cloud one time then stop sendings
void (* resetFunc)(void) = 0; //Declare reset function

void setup() {
  Serial.begin(9600);
  sim800.begin();
  pinMode(buttonPin, INPUT); // set push button pin into input mode
  pinMode(buzzerPin, OUTPUT); // set LED pin into output mode
  pinMode(trigPin,OUTPUT);// set trigPin to output mode
  pinMode(echoPin,INPUT); // set echoPin to input mode
  
}
void loop() {

  
    
  if (digitalRead(buttonPin) == HIGH) // if the button is not pressed
   { digitalWrite(buzzerPin, LOW); // switch off buzzerPin
    digitalWrite(ledPin, LOW); // switch off LED
   }
  else // if the button is pressed
  {
    digitalWrite(buzzerPin, HIGH); // switch on buzzerPin
    delay(1000); 
    digitalWrite(buzzerPin, LOW); // switch off buzzerPin
    SendSMSLocation();
    digitalWrite(ledPin, HIGH); // switch on LED
  }

    delay(300); // Wait 100ms between pings (about 20 pings/sec). 29ms should be the shortest delay between pings.
    Serial.print("Ping: ");
    Serial.print(getSonar()); // Send ping, get distance in cm and print result (0 =  outside set distance range)
    Serial.println("cm");

    AlarmDistance = getSonar();
  
  //  if(AlarmDistance > 35 || (AlarmDistance < 30 && AlarmDistance > 28)){
  if(AlarmDistance > 35){
      digitalWrite(buzzerPin, HIGH); // switch on buzzerPin
      delay(500);
      digitalWrite(buzzerPin, LOW); // switch off buzzerPin
    }
    
    //resetFunc();
    
}
float getSonar() {
    unsigned long pingTime;
    float distance;
    digitalWrite(trigPin, HIGH); // make trigPin output high level lasting for 10Î¼s to triger HC_SR04,
    delayMicroseconds(10);
    digitalWrite(trigPin, LOW);
    pingTime = pulseIn(echoPin, HIGH, timeOut); // Wait HC-SR04 returning to the high level and measure out this waitting time
    distance = (float)pingTime * soundVelocity / 2 / 10000; // calculate the distance according to the time
    return distance; // return the distance value
}

void SendSMSLocation(){
  
  /*****GSM*******************************************************/
  //GSM Connection
   Serial.println("Testing GSM module For SMS Sending");
  delay(8000); // this delay is necessary, it helps the device to be ready and connect to a network

  Serial.println("Should be ready by now");
    bool deviceAttached = sim800.isAttached();
  if (deviceAttached)
    Serial.println("Device is Attached");
  else{
    Serial.println("Not Attached");
    resetFunc();                 //calling reset function
  }
  /*****Location*******************************************************/
  //Location Find
   // Testing for Time Reading and Location
   String time1 = "";
   String location = "";
   time1 = sim800.getTime();
   delay(100);
   location = sim800.getLocation();
   Serial.print("Time received in GMT is: ");
   Serial.println(time1);
   Serial.print("Location is: ");
   Serial.println(location);
   /***String to Char******************************************************/
   int leng;
  leng = location.length();          //this is needed to know the size of the string location

  leng++;                            //add 1 to the size of sResource
  char sendLocation[leng];               //Declaration of array that will hold the converted array of sResource

  location.toCharArray(sendLocation,leng);    //converting string sResource to Array then store is in resource Array

  Serial.println(sendLocation);          //for Debuging purpose
 /******SMS******************************************************/    
  //Text Setup
     //Testing sending SMS aspect

   const char* number = "+251927063044";
   //char* message = "Hello, This is a text message";
   
   delay(1000);
   
   //bool messageSent = sim800.sendSMS(number, message);
   bool messageSent = sim800.sendSMS(number, sendLocation);
   if(messageSent)
      Serial.println("Message Sent");
   else
      Serial.println("Not Sent, Something happened");

 /************************************************************/  
}
